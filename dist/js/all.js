class ShopBoots{async getShopBoots(){try{const e=await fetch("data/shop-data/shop.json"),t=await e.json();return t}catch(e){console.log(e)}}}class UI{displayShopBoots(e){let t="";e.forEach((e=>{t+=`\n                <article class="boot">\n                    <img src="${e.image}" alt="sale boot" class="boot__img">\n                    <div class="boot__data">\n                        <h4 class="boot__name">${e.name}</h4>\n                        <span class="boot__price">${e.price}</span>\n                        <p class="boot__description">\n                            The embodiment of iconic <br/> Dr Martens Footwear   \n                        </p>\n                        <button class="button-light">\n                            Add to cart <img src="/app/images/arrow-right.svg" alt="arrow right icon" width="20px" height="20px">\n                        </button>\n                    </div>\n                </article>\n            `}));const o=document.querySelector(".shop__container");o&&o.insertAdjacentHTML("beforeend",t)}}document.addEventListener("DOMContentLoaded",(()=>{const e=new ShopBoots,t=new UI;e.getShopBoots().then((e=>{t.displayShopBoots(e)}))}));class Boots{async getBoots(){try{const e=await fetch("/data/women-data/boots.json");return await e.json()}catch(e){console.log(e)}}}class Shop{displayWomeBoots(e){let t="";e.forEach((e=>{t+=`\n                <article class="women__boot">\n                    <img src="${e.image}" alt="sale boot" class="women__boot-img">\n                    <div class="women__boot-data">\n                        <h4 class="boot__name">${e.name}</h4>\n                        <span class="boot__price">${e.price}</span>\n                        <p class="boot__description">\n                            The embodiment of iconic <br/> Dr Martens Footwear   \n                        </p>\n                        <button class="button-light">\n                            Add to cart <img src="/app/images/arrow-right.svg" alt="arrow right icon" width="20px" height="20px">\n                        </button>\n                    </div>\n                </article>\n            `}));const o=document.querySelector(".women__container");return o&&o.insertAdjacentHTML("beforeend",t),e}}document.addEventListener("DOMContentLoaded",(()=>{const e=new Shop;(new Boots).getBoots().then((t=>{e.displayWomeBoots(t)}))}));const toggleSearch=()=>{const e=document.querySelector(".nav__search-form"),t=document.querySelector(".nav__search"),o=document.querySelector(".close-search"),n=document.getElementById("search-input");e&&(t.addEventListener("click",(()=>{e.classList.toggle("active-form")})),o.addEventListener("click",(()=>{e.classList.remove("active-form"),n.value=""})))};function filterSearch(){const e=document.getElementById("search-input").value.toLowerCase();document.querySelectorAll("section").forEach((t=>{e&&t.id.toString().toLowerCase().indexOf(e)>-1&&document.getElementById(t.id).scrollIntoView()}))}const openMenu=()=>{const e=document.getElementById("nav-toggle"),t=document.getElementById("nav-menu"),o=document.querySelector(".nav__search-form");e.addEventListener("click",(()=>{t.classList.add("show"),function(){if(o.classList.contains("active-form"))o.classList.remove("active-form")}()}))},closeMenu=()=>{const e=document.getElementById("nav-close"),t=document.getElementById("nav-menu"),o=[...document.querySelectorAll(".nav__link")];e&&o&&(e.addEventListener("click",(()=>{t.classList.remove("show")})),o.forEach((e=>{e.addEventListener("click",(()=>{t.classList.remove("show")}))})))};window.onscroll=()=>{const e=document.getElementById("header");this.scrollY>=30?e.classList.add("scroll-header"):e.classList.remove("scroll-header")};const toggleCart=()=>{const e=document.querySelector(".cart"),t=document.querySelectorAll(".nav__shop"),o=document.querySelector(".cart__close");t.forEach((t=>{t.addEventListener("click",(()=>{e&&e.classList.add("show-cart")}))})),o&&o.addEventListener("click",(()=>{e.classList.remove("show-cart")}))};openMenu(),closeMenu(),toggleSearch(),toggleCart();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
