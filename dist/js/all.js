class ShopBoots{async getShopBoots(){try{const e=await fetch("data/shop-data/shop.json"),t=await e.json();return t}catch(e){console.log(e)}}}class UI{displayShopBoots(e){let t="";e.forEach((e=>{t+=`\n            <article class="boot">\n                    <img src="${e.image}" alt="sale boot" class="boot__img">\n                    <span class="boot__name">${e.name}</span>\n                    <span class="boot__price">${e.price}</span>\n                    <button class="button-light">\n                        Add to cart <img src="/app/images/arrow-right.svg" alt="arrow right icon" width="20px" height="20px">\n                    </button>\n                </article>\n            `}));const o=document.querySelector(".shop__container");o&&o.insertAdjacentHTML("beforeend",t)}}document.addEventListener("DOMContentLoaded",(()=>{const e=new ShopBoots,t=new UI;e.getShopBoots().then((e=>{t.displayShopBoots(e)}))}));class Boots{async getBoots(){try{const e=await fetch("/data/women-data/boots.json");return await e.json()}catch(e){console.log(e)}}}class Shop{displayWomeBoots(e){let t="";e.forEach((e=>{t+=`\n            <article class="boot">\n                <img src=${e.image} alt="women boot" class="boot__img">\n                <span class="boot__name">${e.name}</span>\n                <span class="boot__price">${e.price}</span>\n                <button class="button-light">\n                    Add to cart <img src="/app/images/arrow-right.svg" alt="arrow right icon" width="20px" height="20px">\n                </button>\n            </article>\n            `}));const o=document.querySelector(".women__container");return o&&o.insertAdjacentHTML("beforeend",t),e}}document.addEventListener("DOMContentLoaded",(()=>{const e=new Shop;(new Boots).getBoots().then((t=>{e.displayWomeBoots(t)}))}));const toggleSearch=()=>{const e=document.querySelector(".nav__search-form"),t=document.querySelector(".nav__search"),o=document.querySelector(".close-search"),n=document.getElementById("search-input");e&&(t.addEventListener("click",(()=>{e.classList.toggle("active-form")})),o.addEventListener("click",(()=>{e.classList.remove("active-form"),n.value=""})))};function filterSearch(){const e=document.getElementById("search-input").value.toLowerCase();document.querySelectorAll("section").forEach((t=>{e&&t.id.toString().toLowerCase().indexOf(e)>-1&&document.getElementById(t.id).scrollIntoView()}))}const openMenu=()=>{const e=document.getElementById("nav-toggle"),t=document.getElementById("nav-menu"),o=document.querySelector(".nav__search-form");e.addEventListener("click",(()=>{t.classList.add("show"),function(){if(o.classList.contains("active-form"))o.classList.remove("active-form")}()}))},closeMenu=()=>{const e=document.getElementById("nav-close"),t=document.getElementById("nav-menu"),o=[...document.querySelectorAll(".nav__link")];e&&o&&(e.addEventListener("click",(()=>{t.classList.remove("show")})),o.forEach((e=>{e.addEventListener("click",(()=>{t.classList.remove("show")}))})))};window.onscroll=()=>{const e=document.getElementById("header");this.scrollY>=30?e.classList.add("scroll-header"):e.classList.remove("scroll-header")};const toggleCart=()=>{const e=document.querySelector(".cart"),t=document.querySelectorAll(".nav__shop"),o=document.querySelector(".cart__close");t.forEach((t=>{t.addEventListener("click",(()=>{e&&e.classList.add("show-cart")}))})),o&&o.addEventListener("click",(()=>{e.classList.remove("show-cart")}))};openMenu(),closeMenu(),toggleSearch(),toggleCart();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpc3BsYXlTaG9wLmpzIiwiZGlzcGxheVdvbWVCb290cy5qcyIsImZpbHRlclNlYXJjaC5qcyIsImluZGV4LmpzIl0sIm5hbWVzIjpbIlNob3BCb290cyIsImFzeW5jIiwicmVzcG9uc2UiLCJmZXRjaCIsImRhdGEiLCJqc29uIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwiVUkiLCJkaXNwbGF5U2hvcEJvb3RzIiwic2hvcEJvb3RzIiwicmVzdWx0IiwiZm9yRWFjaCIsImJvb3QiLCJpbWFnZSIsIm5hbWUiLCJwcmljZSIsInNob3BDb250YWluZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJhZGRFdmVudExpc3RlbmVyIiwiYm9vdHMiLCJ1aSIsImdldFNob3BCb290cyIsInRoZW4iLCJCb290cyIsIlNob3AiLCJkaXNwbGF5V29tZUJvb3RzIiwiY29udGFpbmVyIiwic2hvcCIsImdldEJvb3RzIiwidG9nZ2xlU2VhcmNoIiwibmF2U2VhcmNoRm9ybSIsIm5hdlNlYXJjaCIsImNsb3NlU2VhcmNoIiwiaW5wdXQiLCJnZXRFbGVtZW50QnlJZCIsImNsYXNzTGlzdCIsInRvZ2dsZSIsInJlbW92ZSIsInZhbHVlIiwiZmlsdGVyU2VhcmNoIiwic2VhcmNoVGVybSIsInRvTG93ZXJDYXNlIiwicXVlcnlTZWxlY3RvckFsbCIsInNlY3Rpb24iLCJpZCIsInRvU3RyaW5nIiwiaW5kZXhPZiIsInNjcm9sbEludG9WaWV3Iiwib3Blbk1lbnUiLCJuYXZUb2dnbGUiLCJuYXZNZW51IiwiYWRkIiwiY29udGFpbnMiLCJjbG9zZVNlYXJjaEZvcm0iLCJjbG9zZU1lbnUiLCJjbG9zZUJ0biIsIm5hdkxpbmtzIiwibGluayIsIndpbmRvdyIsIm9uc2Nyb2xsIiwiaGVhZGVyIiwidGhpcyIsInNjcm9sbFkiLCJ0b2dnbGVDYXJ0IiwiY2FydCIsIm5hdlNob3AiLCJjYXJ0Q2xvc2UiLCJidG4iXSwibWFwcGluZ3MiOiJBQUFB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QUFDLGNBQUEsZ0JBRUFpRCxFQUFBeEQsU0FBQTBELElBQ0FBLEVBQUFqRCxpQkFBQSxTQUFBLEtBQ0E4QyxHQUFBQSxFQUFBN0IsVUFBQWdCLElBQUEsbUJBSUFlLEdBQ0FBLEVBQUFoRCxpQkFBQSxTQUFBLEtBQ0E4QyxFQUFBN0IsVUFBQUUsT0FBQSxpQkFNQVcsV0FDQU0sWUFDQXpCLGVBQ0FrQyIsImZpbGUiOiJhbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBTaG9wQm9vdHMge1xyXG4gICAgYXN5bmMgZ2V0U2hvcEJvb3RzKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCJkYXRhL3Nob3AtZGF0YS9zaG9wLmpzb25cIilcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxyXG4gICAgICAgICAgICBjb25zdCBzaG9wQm9vdHMgPSBkYXRhO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzaG9wQm9vdHMpXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc2hvcEJvb3RzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG5jbGFzcyBVSSB7XHJcbiAgICBkaXNwbGF5U2hvcEJvb3RzKHNob3BCb290cykge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xyXG4gICAgICAgIHNob3BCb290cy5mb3JFYWNoKGJvb3QgPT4ge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gYFxyXG4gICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz1cImJvb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7Ym9vdC5pbWFnZX1cIiBhbHQ9XCJzYWxlIGJvb3RcIiBjbGFzcz1cImJvb3RfX2ltZ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYm9vdF9fbmFtZVwiPiR7Ym9vdC5uYW1lfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImJvb3RfX3ByaWNlXCI+JHtib290LnByaWNlfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnV0dG9uLWxpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEFkZCB0byBjYXJ0IDxpbWcgc3JjPVwiL2FwcC9pbWFnZXMvYXJyb3ctcmlnaHQuc3ZnXCIgYWx0PVwiYXJyb3cgcmlnaHQgaWNvblwiIHdpZHRoPVwiMjBweFwiIGhlaWdodD1cIjIwcHhcIj5cclxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT5cclxuICAgICAgICAgICAgYFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHNob3BDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNob3BfX2NvbnRhaW5lclwiKVxyXG4gICAgICAgIGlmIChzaG9wQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHNob3BDb250YWluZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIHJlc3VsdClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcclxuICAgIGNvbnN0IGJvb3RzID0gbmV3IFNob3BCb290cygpXHJcbiAgICBjb25zdCB1aSA9IG5ldyBVSSgpXHJcblxyXG4gICAgYm9vdHMuZ2V0U2hvcEJvb3RzKCkudGhlbihib290cyA9PiB7XHJcbiAgICAgICAgdWkuZGlzcGxheVNob3BCb290cyhib290cylcclxuICAgIH0pXHJcbn0pIiwiY2xhc3MgQm9vdHMge1xyXG4gICAgYXN5bmMgZ2V0Qm9vdHMoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcIi9kYXRhL3dvbWVuLWRhdGEvYm9vdHMuanNvblwiKVxyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXHJcbiAgICAgICAgICAgIGxldCBib290cyA9IGRhdGE7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJvb3RzKVxyXG4gICAgICAgICAgICByZXR1cm4gYm9vdHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5jbGFzcyBTaG9wIHtcclxuICAgIGRpc3BsYXlXb21lQm9vdHMoYm9vdHMpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcclxuICAgICAgICBib290cy5mb3JFYWNoKGJvb3QgPT4ge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gYFxyXG4gICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz1cImJvb3RcIj5cclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPSR7Ym9vdC5pbWFnZX0gYWx0PVwid29tZW4gYm9vdFwiIGNsYXNzPVwiYm9vdF9faW1nXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImJvb3RfX25hbWVcIj4ke2Jvb3QubmFtZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImJvb3RfX3ByaWNlXCI+JHtib290LnByaWNlfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidXR0b24tbGlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICBBZGQgdG8gY2FydCA8aW1nIHNyYz1cIi9hcHAvaW1hZ2VzL2Fycm93LXJpZ2h0LnN2Z1wiIGFsdD1cImFycm93IHJpZ2h0IGljb25cIiB3aWR0aD1cIjIwcHhcIiBoZWlnaHQ9XCIyMHB4XCI+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9hcnRpY2xlPlxyXG4gICAgICAgICAgICBgO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud29tZW5fX2NvbnRhaW5lclwiKVxyXG4gICAgICAgIGlmIChjb250YWluZXIpIHtcclxuICAgICAgICAgICAgY29udGFpbmVyLmluc2VydEFkamFjZW50SFRNTChcImJlZm9yZWVuZFwiLCByZXN1bHQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBib290cztcclxuICAgIH1cclxufVxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xyXG4gICAgY29uc3Qgc2hvcCA9IG5ldyBTaG9wKClcclxuICAgIGNvbnN0IGJvb3RzID0gbmV3IEJvb3RzKClcclxuXHJcbiAgICBib290cy5nZXRCb290cygpLnRoZW4oYm9vdHMgPT4ge1xyXG4gICAgICAgIHNob3AuZGlzcGxheVdvbWVCb290cyhib290cylcclxuICAgIH0pXHJcbn0pIiwiY29uc3QgdG9nZ2xlU2VhcmNoID0gKCkgPT4ge1xyXG4gICAgY29uc3QgbmF2U2VhcmNoRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2X19zZWFyY2gtZm9ybVwiKVxyXG4gICAgY29uc3QgbmF2U2VhcmNoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZfX3NlYXJjaFwiKVxyXG4gICAgY29uc3QgY2xvc2VTZWFyY2ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNsb3NlLXNlYXJjaFwiKVxyXG5cdGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWFyY2gtaW5wdXRcIik7XHJcblxyXG5cdGlmKG5hdlNlYXJjaEZvcm0pIHtcclxuXHRcdG5hdlNlYXJjaC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgIG5hdlNlYXJjaEZvcm0uY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZS1mb3JtXCIpXHJcbiAgICB9KVxyXG5cdFx0Y2xvc2VTZWFyY2guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHRcdFx0bmF2U2VhcmNoRm9ybS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlLWZvcm1cIilcclxuXHRcdFx0aW5wdXQudmFsdWUgPSBcIlwiO1xyXG5cdFx0fSlcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbHRlclNlYXJjaCgpIHtcclxuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWFyY2gtaW5wdXRcIik7XHJcbiAgICBjb25zdCBzZWFyY2hUZXJtID0gaW5wdXQudmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IHNlY3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInNlY3Rpb25cIik7XHJcblxyXG4gICAgc2VjdGlvbnMuZm9yRWFjaChzZWN0aW9uID0+IHsgICBcclxuICAgICAgICBpZiAoc2VhcmNoVGVybSAmJiBzZWN0aW9uLmlkLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaFRlcm0pID4gLTEpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VjdGlvbi5pZCkuc2Nyb2xsSW50b1ZpZXcoKVxyXG4gICAgICAgIH0gXHJcbiAgICB9KVxyXG59O1xyXG5cclxuXHJcblxyXG4iLCJjb25zdCBvcGVuTWVudSA9ICgpID0+IHtcclxuICAgIGNvbnN0IG5hdlRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmF2LXRvZ2dsZVwiKVxyXG4gICAgY29uc3QgbmF2TWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmF2LW1lbnVcIilcclxuICAgIGNvbnN0IG5hdlNlYXJjaEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5hdl9fc2VhcmNoLWZvcm1cIilcclxuXHJcbiAgICBuYXZUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICBuYXZNZW51LmNsYXNzTGlzdC5hZGQoXCJzaG93XCIpXHJcbiAgICAgICAgY2xvc2VTZWFyY2hGb3JtKClcclxuICAgIH0pXHJcblxyXG4gICAgZnVuY3Rpb24gY2xvc2VTZWFyY2hGb3JtKCkge1xyXG4gICAgICAgIGlmIChuYXZTZWFyY2hGb3JtLmNsYXNzTGlzdC5jb250YWlucyhcImFjdGl2ZS1mb3JtXCIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuYXZTZWFyY2hGb3JtLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmUtZm9ybVwiKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbmNvbnN0IGNsb3NlTWVudSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNsb3NlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYXYtY2xvc2VcIilcclxuICAgIGNvbnN0IG5hdk1lbnUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hdi1tZW51XCIpXHJcbiAgICBjb25zdCBuYXZMaW5rcyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm5hdl9fbGlua1wiKV1cclxuXHJcbiAgICBpZiAoY2xvc2VCdG4gJiYgbmF2TGlua3MpIHtcclxuICAgICAgICBjbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBuYXZNZW51LmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpXHJcbiAgICAgICAgfSlcclxuICAgICAgICBuYXZMaW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xyXG4gICAgICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBuYXZNZW51LmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxud2luZG93Lm9uc2Nyb2xsID0gKCkgPT4ge1xyXG4gICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoZWFkZXJcIilcclxuICAgIGlmICh0aGlzLnNjcm9sbFkgPj0gMzApIHtcclxuICAgICAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZChcInNjcm9sbC1oZWFkZXJcIilcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKFwic2Nyb2xsLWhlYWRlclwiKVxyXG4gICAgfVxyXG59O1xyXG5cclxuY29uc3QgdG9nZ2xlQ2FydCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNhcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcnRcIilcclxuICAgIGNvbnN0IG5hdlNob3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm5hdl9fc2hvcFwiKVxyXG4gICAgY29uc3QgY2FydENsb3NlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJ0X19jbG9zZVwiKVxyXG5cclxuICAgIG5hdlNob3AuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2FydCkgY2FydC5jbGFzc0xpc3QuYWRkKFwic2hvdy1jYXJ0XCIpXHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcbiAgICBcclxuICAgIGlmIChjYXJ0Q2xvc2UpIHtcclxuICAgICAgICBjYXJ0Q2xvc2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgY2FydC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvdy1jYXJ0XCIpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICBvcGVuTWVudSgpXHJcbiAgICBjbG9zZU1lbnUoKVxyXG4gICAgdG9nZ2xlU2VhcmNoKClcclxuICAgIHRvZ2dsZUNhcnQoKVxyXG59KSgpO1xyXG5cclxuXHJcbiJdfQ==
